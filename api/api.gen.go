// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	"github.com/openmeterio/openmeter/pkg/models"
)

const (
	CloudCookieAuthScopes      = "CloudCookieAuth.Scopes"
	CloudPortalTokenAuthScopes = "CloudPortalTokenAuth.Scopes"
	CloudTokenAuthScopes       = "CloudTokenAuth.Scopes"
	PortalTokenAuthScopes      = "PortalTokenAuth.Scopes"
)

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// IdOrSlug A unique identifier.
type IdOrSlug = string

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event CloudEvents Specification JSON Schema
	Event           Event   `json:"event"`
	ValidationError *string `json:"validationError,omitempty"`
}

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	Data []MeterQueryRow `json:"data"`
	From *time.Time      `json:"from,omitempty"`
	To   *time.Time      `json:"to,omitempty"`

	// WindowSize Aggregation window size.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow = models.MeterQueryRow

// PortalToken A consumer portal token.
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed
	AllowedMeterSlugs *[]string  `json:"allowedMeterSlugs,omitempty"`
	CreatedAt         *time.Time `json:"createdAt,omitempty"`
	Expired           *bool      `json:"expired,omitempty"`
	ExpiresAt         *time.Time `json:"expiresAt,omitempty"`
	Id                *string    `json:"id,omitempty"`
	Subject           string     `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// Problem A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type Problem = models.StatusProblem

// Subject A subject is a unique identifier for a user or entity.
type Subject struct {
	CurrentPeriodEnd   *time.Time              `json:"currentPeriodEnd"`
	CurrentPeriodStart *time.Time              `json:"currentPeriodStart"`
	DisplayName        *string                 `json:"displayName"`
	Id                 *string                 `json:"id,omitempty"`
	Key                string                  `json:"key"`
	Metadata           *map[string]interface{} `json:"metadata"`
	StripeCustomerId   *string                 `json:"stripeCustomerId"`
}

// WindowSize Aggregation window size.
type WindowSize = models.WindowSize

// MeterIdOrSlug A unique identifier.
type MeterIdOrSlug = IdOrSlug

// QueryFilterGroupBy Simple filter for group bys with exact match.
// Usage: ?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4
type QueryFilterGroupBy map[string]string

// QueryFilterSubject defines model for queryFilterSubject.
type QueryFilterSubject = []string

// QueryFrom defines model for queryFrom.
type QueryFrom = time.Time

// QueryGroupBy defines model for queryGroupBy.
type QueryGroupBy = []string

// QueryTo defines model for queryTo.
type QueryTo = time.Time

// QueryWindowSize Aggregation window size.
type QueryWindowSize = WindowSize

// QueryWindowTimeZone defines model for queryWindowTimeZone.
type QueryWindowTimeZone = string

// SubjectIdOrKey defines model for subjectIdOrKey.
type SubjectIdOrKey = string

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = Problem

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = Problem

// NotImplementedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotImplementedProblemResponse = Problem

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = Problem

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = Problem

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering and group by multiple subjects.
	// Usage: ?subject=customer-1&subject=customer-2
	Subject       *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
	FilterGroupBy *QueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
	FilterGroupBy  *QueryFilterGroupBy  `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	// Limit Number of portal tokens to return. Default is 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// InvalidatePortalTokensJSONBody defines parameters for InvalidatePortalTokens.
type InvalidatePortalTokensJSONBody struct {
	// Id Invalidate a portal token by ID.
	Id *string `json:"id,omitempty"`

	// Subject Invalidate all portal tokens for a subject.
	Subject *string `json:"subject,omitempty"`
}

// UpsertSubjectJSONBody defines parameters for UpsertSubject.
type UpsertSubjectJSONBody = []Subject

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// InvalidatePortalTokensJSONRequestBody defines body for InvalidatePortalTokens for application/json ContentType.
type InvalidatePortalTokensJSONRequestBody InvalidatePortalTokensJSONBody

// UpsertSubjectJSONRequestBody defines body for UpsertSubject for application/json ContentType.
type UpsertSubjectJSONRequestBody = UpsertSubjectJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List ingested events
	// (GET /api/v1/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Ingest events
	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)
	// List meters
	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)
	// ☁ Create meter
	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)
	// ☁ Delete meter
	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Get meter
	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query meter
	// (GET /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams)
	// List meter subjects
	// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
	ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query portal meter
	// (GET /api/v1/portal/meters/{meterSlug}/query)
	QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams)
	// ☁ List portal tokens
	// (GET /api/v1/portal/tokens)
	ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams)
	// Create portal token
	// (POST /api/v1/portal/tokens)
	CreatePortalToken(w http.ResponseWriter, r *http.Request)
	// ☁ Invalidate portal tokens
	// (POST /api/v1/portal/tokens/invalidate)
	InvalidatePortalTokens(w http.ResponseWriter, r *http.Request)
	// ☁ List subjects
	// (GET /api/v1/subjects)
	ListSubjects(w http.ResponseWriter, r *http.Request)
	// ☁ Upsert subject
	// (POST /api/v1/subjects)
	UpsertSubject(w http.ResponseWriter, r *http.Request)
	// ☁ Delete subject
	// (DELETE /api/v1/subjects/{subjectIdOrKey})
	DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// ☁ Get subject
	// (GET /api/v1/subjects/{subjectIdOrKey})
	GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List ingested events
// (GET /api/v1/events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ingest events
// (POST /api/v1/events)
func (_ Unimplemented) IngestEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meters
// (GET /api/v1/meters)
func (_ Unimplemented) ListMeters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Create meter
// (POST /api/v1/meters)
func (_ Unimplemented) CreateMeter(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete meter
// (DELETE /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get meter
// (GET /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter
// (GET /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meter subjects
// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
func (_ Unimplemented) ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query portal meter
// (GET /api/v1/portal/meters/{meterSlug}/query)
func (_ Unimplemented) QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List portal tokens
// (GET /api/v1/portal/tokens)
func (_ Unimplemented) ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create portal token
// (POST /api/v1/portal/tokens)
func (_ Unimplemented) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Invalidate portal tokens
// (POST /api/v1/portal/tokens/invalidate)
func (_ Unimplemented) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List subjects
// (GET /api/v1/subjects)
func (_ Unimplemented) ListSubjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Upsert subject
// (POST /api/v1/subjects)
func (_ Unimplemented) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete subject
// (DELETE /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Get subject
// (GET /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeter(w, r, meterIdOrSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeterSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListMeterSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeterSubjects(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryPortalMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryPortalMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterSlug", chi.URLParam(r, "meterSlug"), &meterSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, PortalTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudPortalTokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPortalMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryPortalMeter(w, r, meterSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPortalTokens operation middleware
func (siw *ServerInterfaceWrapper) ListPortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPortalTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPortalTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePortalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortalToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InvalidatePortalTokens operation middleware
func (siw *ServerInterfaceWrapper) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InvalidatePortalTokens(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjects(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertSubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertSubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/subjects", wrapper.ListMeterSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/meters/{meterSlug}/query", wrapper.QueryPortalMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/tokens", wrapper.ListPortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens", wrapper.CreatePortalToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens/invalidate", wrapper.InvalidatePortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects", wrapper.ListSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects", wrapper.UpsertSubject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.DeleteSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.GetSubject)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
